{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "43f3d275-913c-4de7-9c00-15816f09be24",
   "metadata": {},
   "source": [
    "# Welcome to Numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2767099c-af4d-4f43-b433-471d2e33d161",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "63aceaf9-7d6f-4c78-b12d-079b60f4d2b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "NewArray = np.array( [ [1, 2, 3, 4, 5, 6, 7, 8, 9, 0] ], np.int8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9983c4ec-56ca-4ff4-8b3a-7e0465dd8532",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2 3 4 5 6 7 8 9 0]]\n"
     ]
    }
   ],
   "source": [
    "print(NewArray)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "be5518d5-c4eb-4448-99f2-cb08d4441e62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]], dtype=int8)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NewArray"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b7bf5974-cbe9-4ec1-a0c9-27ae1fd02a0a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NewArray[0,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "90a8930e-1b9f-4bb0-ac91-a63cfeeb8fe8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 10)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NewArray.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e6968790-3545-4777-a698-5ba131301fa7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('int8')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NewArray.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8116bf96-f043-4e9d-862b-809e3e96b94a",
   "metadata": {},
   "outputs": [],
   "source": [
    "NewArray [0,3] = 13"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0b6d7b52-dbce-4817-92ef-3cd5aac26c96",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  2,  3, 13,  5,  6,  7,  8,  9,  0]], dtype=int8)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NewArray"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7eb1071-c1f8-4ea3-a201-8674193196b5",
   "metadata": {},
   "source": [
    "**Array Creation: Conversion Other Python Structur**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1b747417-c748-425e-8efe-3af319fb48db",
   "metadata": {},
   "outputs": [],
   "source": [
    "listArray = np.array([[1, 2, 3, 4], [5, 6, 7, 8 ], [9, 10, 11, 12]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "eedc700c-46d9-4427-8efb-eb15acb16006",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  2,  3,  4],\n",
       "       [ 5,  6,  7,  8],\n",
       "       [ 9, 10, 11, 12]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listArray"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cb688523-8dc8-43fd-abaa-3e9ee861ac1b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 4)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listArray.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "63cb74a3-f413-4951-be34-fedd94b081b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('int32')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listArray.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8acbe271-256c-43ef-a48a-a2fc44aab1f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listArray.size"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7749433-00fd-461f-99d1-45f3c4c37e6a",
   "metadata": {},
   "source": [
    "*Creating from Diffrent Structuer*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "eb2cb9d5-fdb1-497d-93f2-60c22c5f3ae9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array({33, 11, 22}, dtype=object)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.array({11,22,33})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "907181d8-43e5-49c8-953d-170f2bcf8f3a",
   "metadata": {},
   "source": [
    "*Intrinsic numpy array array creation objects*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc75a8b3-174a-4e43-b4da-70bcdc5041d4",
   "metadata": {},
   "source": [
    "***Create New Array ALigments***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2a4b09ca-b8e3-4637-a734-dd935b854aaf",
   "metadata": {},
   "outputs": [],
   "source": [
    "zeros = np.zeros((3,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2f83cadc-44e9-4c4f-aa27-a12f336326a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0. 0. 0.]\n",
      " [0. 0. 0. 0.]\n",
      " [0. 0. 0. 0.]] This is for empty Function\n"
     ]
    }
   ],
   "source": [
    "print(zeros, \"This is for empty Function\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7aba5b2f-bca9-46ed-a838-32c4eabd38c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 4)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "zeros.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "3a48c909-ab57-4403-aa64-a8c35a677d7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "zeros.size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "bc0180ae-2285-430b-99a2-3a6c7ffa115c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('float64')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "zeros.dtype"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbd1b92b-fa26-4fdd-ac7c-c461504a5dd0",
   "metadata": {},
   "source": [
    "*Python Arange Function*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "112329bf-42b8-4011-b4f8-08005fc0dfee",
   "metadata": {},
   "outputs": [],
   "source": [
    "arange = np.arange(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "bc03030d-c50f-4ec2-9d4c-c221c69ca938",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3 4 5 6 7 8 9] This is a simple Numpy Array arange Function in order\n"
     ]
    }
   ],
   "source": [
    "print(arange ,\"This is a simple Numpy Array arange Function in order\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "baae37e2-bd85-4162-9a0e-6ff4b55f181f",
   "metadata": {},
   "outputs": [],
   "source": [
    "lspace = np.linspace(2,4,8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2a122ef2-27ac-4d1b-8689-8865e80557e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.         2.28571429 2.57142857 2.85714286 3.14285714 3.42857143\n",
      " 3.71428571 4.        ] \n",
      "Start (where the line begins)\n",
      "\n",
      "Stop (where the line ends)\n",
      "\n",
      "Number of parts (how many points you want)\n"
     ]
    }
   ],
   "source": [
    "print(lspace, \"\"\"\\nStart (where the line begins)\\n\n",
    "Stop (where the line ends)\\n\n",
    "Number of parts (how many points you want)\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "3ffe9197-c100-48ba-b10e-ba0acadd18b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "emp = np.empty((2,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "20157cbd-e765-4f08-adbc-16c08a6d8630",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2.        , 2.28571429, 2.57142857, 2.85714286],\n",
       "       [3.14285714, 3.42857143, 3.71428571, 4.        ]])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "42593fff-819c-448e-9b2a-f2afff60db71",
   "metadata": {},
   "outputs": [],
   "source": [
    "emp_like = np.empty_like(NewArray)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "7d908991-967c-47e3-a6fe-2d2b86ee313f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 16, -18,  12,  96, -76,   1,   0,   0,   0,   0]], dtype=int8)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emp_like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "b55461a2-6148-401e-9240-2d97661fb596",
   "metadata": {},
   "outputs": [],
   "source": [
    "ide = np.identity(12) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "08a43144-3b7b-4ee6-a8e2-bf13629a8ae5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(12, 12)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ide.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e9f33fd7-0a17-47fe-a0c1-fb315ac11794",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]] \n",
      "\n",
      "An identity matrix is a square matrix (same number of rows and columns) where:\n",
      "\n",
      "All the diagonal elements (top-left to bottom-right) are 1.\n",
      "\n",
      "All the other elements are 0\n"
     ]
    }
   ],
   "source": [
    "print(ide, \"\"\"\\n\\nAn identity matrix is a square matrix (same number of rows and columns) where:\\n\n",
    "All the diagonal elements (top-left to bottom-right) are 1.\\n\n",
    "All the other elements are 0\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "2e4989dc-1b7f-46d2-ab4f-4756cb15d99e",
   "metadata": {},
   "outputs": [],
   "source": [
    "ar = np.arange(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "7e8d08f1-4dad-4f8b-ae43-8fd4eae90b35",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n",
      " 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\n",
      " 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71\n",
      " 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95\n",
      " 96 97 98 99] \n",
      " to arange the matrix\n"
     ]
    }
   ],
   "source": [
    "print(ar, \"\\n\", \"to arange the matrix\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "d2835e32-a7fd-48d3-a64b-bc5cfc693b7f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],\n",
       "       [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n",
       "       [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],\n",
       "       [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\n",
       "       [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],\n",
       "       [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],\n",
       "       [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n",
       "       [70, 71, 72, 73, 74, 75, 76, 77, 78, 79],\n",
       "       [80, 81, 82, 83, 84, 85, 86, 87, 88, 89],\n",
       "       [90, 91, 92, 93, 94, 95, 96, 97, 98, 99]])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.reshape(10,10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "d4b73b85-7511-4787-a542-fd5e1daaaadf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n",
       "       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n",
       "       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n",
       "       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\n",
       "       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\n",
       "       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.ravel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "e9e90788-7423-4ca8-ac68-dcb46ae3cf10",
   "metadata": {},
   "outputs": [],
   "source": [
    "arr = ar.reshape(10,10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "1a545881-9266-4911-9b8f-0df3d64dc760",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0  1  2  3  4  5  6  7  8  9]\n",
      " [10 11 12 13 14 15 16 17 18 19]\n",
      " [20 21 22 23 24 25 26 27 28 29]\n",
      " [30 31 32 33 34 35 36 37 38 39]\n",
      " [40 41 42 43 44 45 46 47 48 49]\n",
      " [50 51 52 53 54 55 56 57 58 59]\n",
      " [60 61 62 63 64 65 66 67 68 69]\n",
      " [70 71 72 73 74 75 76 77 78 79]\n",
      " [80 81 82 83 84 85 86 87 88 89]\n",
      " [90 91 92 93 94 95 96 97 98 99]] \n",
      " To reshape the array 10 * 10\n"
     ]
    }
   ],
   "source": [
    "print(arr, \"\\n\", \"To reshape the array 10 * 10\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "047fc636-63f3-4c12-8c43-5a7ee1975f92",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n",
      " 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\n",
      " 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71\n",
      " 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95\n",
      " 96 97 98 99] \n",
      "To create One D array\n"
     ]
    }
   ],
   "source": [
    "print(arr.ravel(),\"\\nTo create One D array\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "938dc7d9-f87b-4a2b-8576-e3165285c001",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = arr.ravel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "c8e519a7-c574-4d3c-86c4-1a836654fc5e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n",
      " 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\n",
      " 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71\n",
      " 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95\n",
      " 96 97 98 99] \n",
      "To create One D array\n"
     ]
    }
   ],
   "source": [
    "print(a,\"\\nTo create One D array\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "7d885ba6-de35-4131-a8ef-a958cfa7138b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100,)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "877fd909-e1ca-4b32-b2bb-e35609816c4c",
   "metadata": {},
   "source": [
    "***Let's create a X axix***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "dc6c8d64-4f43-4766-bcda-0f0d35f3d7e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = [[1,2,3], [4,5,6], [7,8,9]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "a1700be3-0083-419b-8012-12085f869aed",
   "metadata": {},
   "outputs": [],
   "source": [
    "Xis= np.array(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "b193c4b5-0f19-4dc5-9e44-228e5dcba3a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3],\n",
       "       [4, 5, 6],\n",
       "       [7, 8, 9]])"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Xis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "e3cc5a81-61a1-4b80-b9af-bb1829087061",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([12, 15, 18])"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Xis.sum(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "d8e3b18e-9f25-4070-96f9-2e62818459a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 6, 15, 24])"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Xis.sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "355cba5b-79d3-4a9c-9e54-c06c1119172a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 4 7]\n",
      " [2 5 8]\n",
      " [3 6 9]] \n",
      "For 2D Arrays (Matrices):\n",
      "Rows become columns.\n",
      "Columns become rows.\n"
     ]
    }
   ],
   "source": [
    "print(Xis.T, \"\"\"\\nFor 2D Arrays (Matrices):\n",
    "Rows become columns.\n",
    "Columns become rows.\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "d8a264a7-01b4-4db3-9134-8c0171f47808",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<numpy.flatiter at 0x1b4600b4670>"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Xis.flat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "36bb739c-6c81-4ac5-b94e-f565dfe359fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 \n",
      "\n",
      "2 \n",
      "\n",
      "3 \n",
      "\n",
      "4 \n",
      "\n",
      "5 \n",
      "\n",
      "6 \n",
      "\n",
      "7 \n",
      "\n",
      "8 \n",
      "\n",
      "9 \n",
      "\n",
      "It does not create a new array. Instead, it gives an iterator to access all elements in a flattened (1D) order.\n",
      "It is useful for looping through elements of multi-dimensional arrays.\n",
      "You can access individual elements using an index (like a 1D array).\n"
     ]
    }
   ],
   "source": [
    "for Item in Xis.flat:\n",
    "    print(Item,\"\\n\")\n",
    "print(\"\"\"It does not create a new array. Instead, it gives an iterator to access all elements in a flattened (1D) order.\n",
    "It is useful for looping through elements of multi-dimensional arrays.\n",
    "You can access individual elements using an index (like a 1D array).\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "2f30702b-3724-4f65-b381-f4153229a004",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=Xis.ndim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "22a09df0-8662-4e4e-b3c0-8323aed8378d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "b0c634c8-b49b-4ef3-98e1-c51bffcfd100",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Xis.size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "9c7a9867-734e-4c2f-b211-fe58432503a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "36"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Xis.nbytes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a78af084-3390-4dae-8210-913da5835a15",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5

